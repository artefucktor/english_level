#!/usr/bin/env python
# coding: utf-8


import os
import re
import time

import streamlit as st
import pandas as pd

import pysrt
import chardet
import requests

from joblib import load
from english_level_process import ProcessData
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import SRTFormatter

ENGLISH_LEVELS = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']
EXAMPLE_SUBS   = 'Fear.2023.720p.WEBRip.x264.AAC-[HQCINEMAS.COM].srt'
DIRNAME = os.path.dirname(__file__)
level = 1

# –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –∫–ª–∞—Å—Å —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π
model = load(DIRNAME + '/english_level_model.joblib')
process = ProcessData()

# —à–∞–ø–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title='–£—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –≤ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö', 
                   page_icon='üì∫', 
                   layout="centered", 
                   initial_sidebar_state="auto", 
                   menu_items=None)

with st.container():
    st.header('–û–ø—Ä–µ–¥–µ–ª–∏–º —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ')
    st.markdown('*–ø–æ —Å—É–±—Ç–∏—Ç—Ä–∞–º* üì∫ *–≤ —Ñ–∏–ª—å–º–µ*')
    
uploaded_file = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .srt', type='.srt', key=None)
youtube = st.text_input('–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube-–≤–∏–¥–µ–æ')
confirm = st.button('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ')

# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—Ñ–∞–π–ª
filename = EXAMPLE_SUBS
fullpath = os.path.join(DIRNAME,filename)
encoding = chardet.detect(open(fullpath, "rb").read())['encoding']
content = pysrt.open(fullpath, encoding=encoding)

# –∑–∞–ø—Ä–æ—Å –Ω–∞ —é—Ç—É–± ‚Äì –≤—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ id –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å —Å–∞–±—ã
if youtube!='' and confirm:
    try:
        uploaded_file = None
        pattern = r'(v=[\w-]+)|(youtu\.be\/[\w-]+)|(embed\/[\w-]+)'
        video_id = re.split(r'[^\w-]',re.search(pattern, youtube).group())[-1]
        transcript = YouTubeTranscriptApi.get_transcript(video_id,languages=['en'])
        formatter = SRTFormatter()
        srt = formatter.format_transcript(transcript)
        content = pysrt.from_string(srt)
        filename = youtube
    except:
        st.error(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—É–±—Ç–∏—Ç—Ä—ã {youtube} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
        demo_subs()

# –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ pysrt
if uploaded_file is not None:
    try:
        youtube = ''
        encoding = chardet.detect(uploaded_file.getvalue())['encoding']
        content = pysrt.from_string(uploaded_file.getvalue().decode(encoding))
        filename = uploaded_file.name
    except:
        st.error(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∞–π–ª')
        demo_subs()

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
st.subheader(filename)
with st.spinner('–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º...'):
    movies = process.process_data(content)
    if len(movies)>0:
        level  = model.predict(movies)[0]
    else:
        filename = EXAMPLE_SUBS


'---'
# —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç –≤ —é–∑–µ—Ä-—Ñ—Ä–µ–Ω–¥–ª–∏ —Ñ–æ—Ä–º—É –∏ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
max_level   = len(ENGLISH_LEVELS)-1
round_level = ENGLISH_LEVELS[min(round(level), max_level)]
floor_level = ENGLISH_LEVELS[min(int(level), max_level)]
ceil_level  = ENGLISH_LEVELS[min(int(level)+1, max_level)]

user_level    = ENGLISH_LEVELS[max_level]+'+' if level>=max_level else \
                floor_level+'+' if 0.2<=level%1<0.5 else \
                floor_level+'+/'+ceil_level if 0.5<=level%1<0.8 else \
                round_level

st.subheader('–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏')
st.write(f'–î–ª—è –æ—Ü–µ–Ω–∫–∏ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—ã—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —Å–ª–æ–≤–∞—Ä–∏ Oxford. '
         f'–ù–∞—à–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —Ñ–∏–ª—å–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ '
         f'{user_level}.')
st.title(user_level)

level_bar = st.progress(0)
for i in range(min(round(1/6 * level * 100),101)):
    level_bar.progress(i)
    time.sleep(0.001)

    
'---'
st.subheader(f'–û–±—Ä–∞–∑–µ—Ü: –ø–µ—Ä–≤—ã–µ 5 —Ç–∏—Ç—Ä–æ–≤')
st.info('\n\n'.join(' '.join([str(s.start), s.text]) for s in content[:5]))


'---'
# –ø–æ–¥—Å—á–∏—Ç–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–≤ –ø–æ –æ–∫—Å—Ñ–æ—Ä–¥—É
words_under_level = movies[[l + 'ratio' for l in ENGLISH_LEVELS[:min(round(level),max_level)]]].sum(axis=1)[0]
words_upper_level = movies[[l + 'ratio' for l in ENGLISH_LEVELS[min(round(level),max_level):max_level]]].sum(axis=1)[0]

st.subheader('–°—Ç–∞–Ω–¥–∞—Ä—Ç CEFR')
st.write('–í —Å–ª–æ–≤–∞—Ä—è—Ö Oxford 3000 –∏ 5000 ‚Äî –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π, –∫—Ç–æ —É—á–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.')
st.write('–°–ª–æ–≤–∞—Ä—å Oxford —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º CEFR ‚Äì The Common European Framework of Reference for Languages. '
         '–≠—Ç–æ –æ–±—â–µ–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –≤–ª–∞–¥–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º: –∏–∑—É—á–µ–Ω–∏–µ, –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏–µ, –æ—Ü–µ–Ω–∫–∞ ‚Äî '
         '—Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –≤–ª–∞–¥–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ –ï–≤—Ä–æ–ø–µ–π—Å–∫–æ–º –°–æ—é–∑–µ.')
st.write('–ú—ã —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏, —Å–ª–æ–≤–∞ –∫–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —Ñ–∏–ª—å–º–µ:')

if words_under_level > 0:
    st.progress(words_under_level, text=f"{words_under_level:.0%} —Å–ª–æ–≤ –¥–æ {round_level} —É—Ä–æ–≤–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")

if words_upper_level > 0:
    st.progress(words_upper_level, text=f"{words_upper_level:.0%} —Å–ª–æ–≤ –ø—Ä–µ–≤—ã—à–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å {round_level} –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")

st.write('–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.')
    
'---'
# –ø–æ–¥—Å—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É —Å–ª–æ–≤
less_than_4 = movies.less_than_4ratio[0]
between_4_6 = movies[['len_equal_' + str(i) + 'ratio' for i in range(4,7)]].sum(axis=1)[0]
more_than_6 = movies.more_than_6ratio[0]

st.subheader('–ó–∞–ø–∞—Å —Å–ª–æ–≤')
st.write(f'–í—Å–µ–≥–æ –≤ —Ñ–∏–ª—å–º–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {movies.lemmas_unique[0]} —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤.')
st.write('–í —Ü–µ–ª–æ–º –≥–µ—Ä–æ–∏ —Ñ–∏–ª—å–º–∞ –∏—Å–ø–æ–ª—å—É—é—Ç —Å–ª–æ–≤–∞ –≤–æ—Ç —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã:')

if less_than_4 > 0:
    st.progress(less_than_4, text=f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –±—É–∫–≤: {less_than_4:.0%}")

if between_4_6 > 0:    
    st.progress(between_4_6, text=f"–°—Ä–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç —á–µ—Ç—ã—Ä–µ—Ö –¥–æ —à–µ—Å—Ç–∏ –±—É–∫–≤: {between_4_6:.0%}")
    
if more_than_6 > 0:
    st.progress(more_than_6, text=f"–î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç —Å–µ–º–∏ –∏ –±–æ–ª—å—à–µ –±—É–∫–≤: {more_than_6:.0%}")

'---'
# –ø–æ–¥–≤–∞–ª
st.markdown('- –ü–∏—à–∏—Ç–µ –ø–∏—Å—å–º–∞ [–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ](https://t.me/artefucktor)')
st.markdown('- –∏–ª–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ [–Ω–∞ –≥–∏—Ç—Ö–∞–±](https://github.com/artefucktor)')



